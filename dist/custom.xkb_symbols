// Generated by kalamine on 2024-04-16
//
// This XKB symbols file should be copied to:
//     /usr/share/X11/xkb/symbols/custom
// or
//     $XKB_CONFIG_ROOT/symbols/custom
//
// File          : custom.xkb_symbols
// Project page  : https://OneDeadKey.github.com/kalamine
// Author        : nobody
// Version       : 0.0.1
// License       : WTFPL - Do What The Fuck You Want Public License
//
// custom colemak-dh layout
//
// Base layer + dead key
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
// │ ~   │ !   │ @   │ #   │ $   │ %   │ ^   │ &   │ *   │ (   │ )   │ _   │ +   ┃          ┃
// │ `   │ 1   │ 2 « │ 3 » │ 4   │ 5 € │ 6   │ 7   │ 8   │ 9   │ 0   │ -   │ =   ┃ ⌫        ┃
// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┯━━━━━━━┩
// ┃        ┃ Q   │ W   │ F   │ P   │ B   │ J   │ L   │ U   │ Y   │ :   │ {   │ }   │ |     │
// ┃ ↹      ┃     │     │   é │     │     │   ý │   ú │   í │   ó │ ;   │ [   │ ]   │ \     │
// ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━━━┪
// ┃         ┃ A   │ R   │ S   │ T   │ G   │ M   │ N   │ E   │ I   │ O   │*¨   ┃            ┃
// ┃ ⇬       ┃   á │     │     │     │     │     │     │     │     │     │** ' ┃ ⏎          ┃
// ┣━━━━━━━━━┻━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┻━━━━━━━━━━━━┫
// ┃            ┃ Z   │ X   │ C   │ D   │ V   │ K   │ H   │ < • │ >   │ ?   ┃               ┃
// ┃ ⇧          ┃     │     │   ç │     │     │     │   µ │ , · │ . … │ /   ┃ ⇧             ┃
// ┣━━━━━━━┳━━━━┻━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ Alt   ┃ super ┃ menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛
//
// AltGr layer
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
// │  *~ │     │     │     │     │     │     │     │     │     │     │     │     ┃          ┃
// │  *` │     │     │     │     │     │  *^ │     │     │     │     │     │     ┃ ⌫        ┃
// ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┯━━━━━━━┩
// ┃        ┃     │     │     │     │     │     │     │     │     │     │     │     │       │
// ┃ ↹      ┃   @ │   < │   > │   $ │   % │   ^ │   & │   * │   ' │   ` │     │     │       │
// ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━━━┪
// ┃         ┃     │     │     │     │     │     │     │     │     │     │  *¨ ┃            ┃
// ┃ ⇬       ┃   { │   ( │   ) │   } │   = │   \ │   + │   - │   / │   " │  *´ ┃ ⏎          ┃
// ┣━━━━━━━━━┻━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┻━━━━━━━━━━━━┫
// ┃            ┃     │     │     │     │     │     │     │     │     │     ┃               ┃
// ┃ ⇧          ┃   ~ │   [ │   ] │   _ │   # │   | │   ! │   ; │   : │   ? ┃ ⇧             ┃
// ┣━━━━━━━┳━━━━┻━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
// ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ Alt   ┃ super ┃ menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

partial alphanumeric_keys modifier_keys
xkb_symbols "tk" {
    name[group1]= "custom colemak-dh layout";
    key.type[group1] = "EIGHT_LEVEL";

    // Digits
    key <AE01> {[ 1               , exclam          , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 1 !
    key <AE02> {[ 2               , at              , VoidSymbol      , VoidSymbol      , guillemotleft   , VoidSymbol      ]}; // 2 @     «
    key <AE03> {[ 3               , numbersign      , VoidSymbol      , VoidSymbol      , guillemotright  , VoidSymbol      ]}; // 3 #     »
    key <AE04> {[ 4               , dollar          , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 4 $
    key <AE05> {[ 5               , percent         , VoidSymbol      , VoidSymbol      , EuroSign        , VoidSymbol      ]}; // 5 %     €
    key <AE06> {[ 6               , asciicircum     , dead_circumflex , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 6 ^ ^
    key <AE07> {[ 7               , ampersand       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 7 &
    key <AE08> {[ 8               , asterisk        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 8 *
    key <AE09> {[ 9               , parenleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 9 (
    key <AE10> {[ 0               , parenright      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // 0 )

    // Letters, first row
    key <AD01> {[ q               , Q               , at              , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // q Q @
    key <AD02> {[ w               , W               , less            , lessthanequal   , VoidSymbol      , VoidSymbol      ]}; // w W < ≤
    key <AD03> {[ f               , F               , greater         , greaterthanequal, eacute          , Eacute          ]}; // f F > ≥ é É
    key <AD04> {[ p               , P               , dollar          , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // p P $
    key <AD05> {[ b               , B               , percent         , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // b B %
    key <AD06> {[ j               , J               , asciicircum     , VoidSymbol      , yacute          , Yacute          ]}; // j J ^   ý Ý
    key <AD07> {[ l               , L               , ampersand       , VoidSymbol      , uacute          , Uacute          ]}; // l L &   ú Ú
    key <AD08> {[ u               , U               , asterisk        , VoidSymbol      , iacute          , Iacute          ]}; // u U *   í Í
    key <AD09> {[ y               , Y               , apostrophe      , VoidSymbol      , oacute          , Oacute          ]}; // y Y '   ó Ó
    key <AD10> {[ semicolon       , colon           , grave           , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ; : `

    // Letters, second row
    key <AC01> {[ a               , A               , braceleft       , VoidSymbol      , aacute          , Aacute          ]}; // a A {   á Á
    key <AC02> {[ r               , R               , parenleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // r R (
    key <AC03> {[ s               , S               , parenright      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // s S )
    key <AC04> {[ t               , T               , braceright      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // t T }
    key <AC05> {[ g               , G               , equal           , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // g G =
    key <AC06> {[ m               , M               , backslash       , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // m M \ 
    key <AC07> {[ n               , N               , plus            , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // n N +
    key <AC08> {[ e               , E               , minus           , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // e E -
    key <AC09> {[ i               , I               , slash           , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // i I /
    key <AC10> {[ o               , O               , quotedbl        , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // o O "

    // Letters, third row
    key <AB01> {[ z               , Z               , asciitilde      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // z Z ~
    key <AB02> {[ x               , X               , bracketleft     , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // x X [
    key <AB03> {[ c               , C               , bracketright    , VoidSymbol      , ccedilla        , Ccedilla        ]}; // c C ]   ç Ç
    key <AB04> {[ d               , D               , underscore      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // d D _
    key <AB05> {[ v               , V               , numbersign      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // v V #
    key <AB06> {[ k               , K               , bar             , brokenbar       , VoidSymbol      , VoidSymbol      ]}; // k K | ¦
    key <AB07> {[ h               , H               , exclam          , VoidSymbol      , mu              , VoidSymbol      ]}; // h H !   µ
    key <AB08> {[ comma           , less            , semicolon       , VoidSymbol      , periodcentered  , U2022           ]}; // , < ;   · •
    key <AB09> {[ period          , greater         , colon           , VoidSymbol      , ellipsis        , VoidSymbol      ]}; // . > :   …
    key <AB10> {[ slash           , question        , question        , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // / ? ?

    // Pinky keys
    key <AE11> {[ minus           , underscore      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // - _
    key <AE12> {[ equal           , plus            , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // = +
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ ISO_Level5_Latch, dead_diaeresis  , dead_acute      , dead_diaeresis  , apostrophe      , VoidSymbol      ]}; // ' ¨ ´ ¨ '
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , dead_grave      , dead_tilde      , VoidSymbol      , VoidSymbol      ]}; // ` ~ ` ~
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //

    // Space bar
    key <SPCE> {[ space           , space           , space           , space           , apostrophe      , apostrophe      ]}; //         ' '

    // The AltGr key is an ISO_Level3_Shift:
    include "level3(ralt_switch)"

    // The “OneDeadKey” is an ISO_Level5_Latch, which is activated by this:
    // (note: MDSW [Mode_switch] is an alias for LVL5 on recent versions of XKB)
    replace key <MDSW> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ ISO_Level5_Shift ]
    };
    modifier_map Mod3 { <MDSW> };
};
// vim: ft=xkb:fdm=indent:ts=4:nowrap
