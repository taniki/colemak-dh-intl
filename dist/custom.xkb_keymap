// Generated by kalamine on 2024-04-16
//
// This is a standalone XKB keymap file. To apply this keymap, use:
//   xkbcomp -w9 custom.xkb_keymap $DISPLAY
//
// DO NOT COPY THIS INTO xkb/symbols: THIS WOULD MESS UP YOUR XKB CONFIG.
//
// File          : custom.xkb_keymap
// Project page  : https://OneDeadKey.github.com/kalamine
// Author        : nobody
// Version       : 0.0.1
// License       : WTFPL - Do What The Fuck You Want Public License
//
// custom colemak-dh layout
//

xkb_keymap {
  xkb_keycodes      { include "evdev"    };
  xkb_types         { include "complete" };
  xkb_compatibility { include "complete" };

  // ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
  // │ ~*~ │ !   │ @   │ #   │ $   │ %   │ ^   │ &   │ *   │ (   │ )   │ _   │ +   ┃          ┃
  // │ `*` │ 1   │ 2   │ 3   │ 4   │ 5   │ 6*^ │ 7   │ 8   │ 9   │ 0   │ -   │ =   ┃ ⌫        ┃
  // ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┯━━━━━━━┩
  // ┃        ┃ Q   │ W   │ F   │ P   │ B   │ J   │ L   │ U   │ Y   │ :   │ {   │ }   │ |     │
  // ┃ ↹      ┃   @ │   < │   > │   $ │   % │   ^ │   & │   * │   ' │ ; ` │ [   │ ]   │ \     │
  // ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━━━┪
  // ┃         ┃ A   │ R   │ S   │ T   │ G   │ M   │ N   │ E   │ I   │ O   │ "*¨ ┃            ┃
  // ┃ ⇬       ┃   { │   ( │   ) │   } │   = │   \ │   + │   - │   / │   " │ '*´ ┃ ⏎          ┃
  // ┣━━━━━━━━━┻━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┻━━━━━━━━━━━━┫
  // ┃            ┃ Z   │ X   │ C   │ D   │ V   │ K   │ H   │ <   │ >   │ ?   ┃               ┃
  // ┃ ⇧          ┃   ~ │   [ │   ] │   _ │   # │   | │   ! │ , ; │ . : │ / ? ┃ ⇧             ┃
  // ┣━━━━━━━┳━━━━┻━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
  // ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
  // ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ Alt   ┃ super ┃ menu  ┃ Ctrl  ┃
  // ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

  partial alphanumeric_keys modifier_keys
  xkb_symbols "tk" {
    include "pc"
    include "inet(evdev)"
    include "level3(ralt_switch)"

    name[group1]= "custom colemak-dh layout";
    key.type[group1] = "FOUR_LEVEL";

    // Digits
    key <AE01> {[ 1               , exclam          , VoidSymbol      , VoidSymbol      ]}; // 1 !
    key <AE02> {[ 2               , at              , VoidSymbol      , VoidSymbol      ]}; // 2 @
    key <AE03> {[ 3               , numbersign      , VoidSymbol      , VoidSymbol      ]}; // 3 #
    key <AE04> {[ 4               , dollar          , VoidSymbol      , VoidSymbol      ]}; // 4 $
    key <AE05> {[ 5               , percent         , VoidSymbol      , VoidSymbol      ]}; // 5 %
    key <AE06> {[ 6               , asciicircum     , dead_circumflex , VoidSymbol      ]}; // 6 ^ ^
    key <AE07> {[ 7               , ampersand       , VoidSymbol      , VoidSymbol      ]}; // 7 &
    key <AE08> {[ 8               , asterisk        , VoidSymbol      , VoidSymbol      ]}; // 8 *
    key <AE09> {[ 9               , parenleft       , VoidSymbol      , VoidSymbol      ]}; // 9 (
    key <AE10> {[ 0               , parenright      , VoidSymbol      , VoidSymbol      ]}; // 0 )

    // Letters, first row
    key <AD01> {[ q               , Q               , at              , VoidSymbol      ]}; // q Q @
    key <AD02> {[ w               , W               , less            , lessthanequal   ]}; // w W < ≤
    key <AD03> {[ f               , F               , greater         , greaterthanequal]}; // f F > ≥
    key <AD04> {[ p               , P               , dollar          , VoidSymbol      ]}; // p P $
    key <AD05> {[ b               , B               , percent         , VoidSymbol      ]}; // b B %
    key <AD06> {[ j               , J               , asciicircum     , VoidSymbol      ]}; // j J ^
    key <AD07> {[ l               , L               , ampersand       , VoidSymbol      ]}; // l L &
    key <AD08> {[ u               , U               , asterisk        , VoidSymbol      ]}; // u U *
    key <AD09> {[ y               , Y               , apostrophe      , VoidSymbol      ]}; // y Y '
    key <AD10> {[ semicolon       , colon           , grave           , VoidSymbol      ]}; // ; : `

    // Letters, second row
    key <AC01> {[ a               , A               , braceleft       , VoidSymbol      ]}; // a A {
    key <AC02> {[ r               , R               , parenleft       , VoidSymbol      ]}; // r R (
    key <AC03> {[ s               , S               , parenright      , VoidSymbol      ]}; // s S )
    key <AC04> {[ t               , T               , braceright      , VoidSymbol      ]}; // t T }
    key <AC05> {[ g               , G               , equal           , VoidSymbol      ]}; // g G =
    key <AC06> {[ m               , M               , backslash       , VoidSymbol      ]}; // m M \ 
    key <AC07> {[ n               , N               , plus            , VoidSymbol      ]}; // n N +
    key <AC08> {[ e               , E               , minus           , VoidSymbol      ]}; // e E -
    key <AC09> {[ i               , I               , slash           , VoidSymbol      ]}; // i I /
    key <AC10> {[ o               , O               , quotedbl        , VoidSymbol      ]}; // o O "

    // Letters, third row
    key <AB01> {[ z               , Z               , asciitilde      , VoidSymbol      ]}; // z Z ~
    key <AB02> {[ x               , X               , bracketleft     , VoidSymbol      ]}; // x X [
    key <AB03> {[ c               , C               , bracketright    , VoidSymbol      ]}; // c C ]
    key <AB04> {[ d               , D               , underscore      , VoidSymbol      ]}; // d D _
    key <AB05> {[ v               , V               , numbersign      , VoidSymbol      ]}; // v V #
    key <AB06> {[ k               , K               , bar             , brokenbar       ]}; // k K | ¦
    key <AB07> {[ h               , H               , exclam          , VoidSymbol      ]}; // h H !
    key <AB08> {[ comma           , less            , semicolon       , VoidSymbol      ]}; // , < ;
    key <AB09> {[ period          , greater         , colon           , VoidSymbol      ]}; // . > :
    key <AB10> {[ slash           , question        , question        , VoidSymbol      ]}; // / ? ?

    // Pinky keys
    key <AE11> {[ minus           , underscore      , VoidSymbol      , VoidSymbol      ]}; // - _
    key <AE12> {[ equal           , plus            , VoidSymbol      , VoidSymbol      ]}; // = +
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ apostrophe      , quotedbl        , dead_acute      , dead_diaeresis  ]}; // ' " ´ ¨
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , dead_grave      , dead_tilde      ]}; // ` ~ ` ~
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //

    // Space bar
    key <SPCE> {[ space           , space           , space           , space           ]}; //
  };
};
// vim: ft=xkb:fdm=indent:ts=2:nowrap
