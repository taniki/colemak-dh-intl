// Generated by kalamine on 2024-04-16
//
// This is a standalone XKB keymap file. To apply this keymap, use:
//   xkbcomp -w9 custom.xkb_keymap $DISPLAY
//
// DO NOT COPY THIS INTO xkb/symbols: THIS WOULD MESS UP YOUR XKB CONFIG.
//
// File          : custom.xkb_keymap
// Project page  : https://OneDeadKey.github.com/kalamine
// Author        : nobody
// Version       : 0.0.1
// License       : WTFPL - Do What The Fuck You Want Public License
//
// custom colemak-dh layout
//

xkb_keymap {
  xkb_keycodes      { include "evdev"    };
  xkb_types         { include "complete" };
  xkb_compatibility { include "complete" };

  // Base layer + dead key
  // ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
  // │ ~   │ !   │ @   │ #   │ $   │ %   │ ^   │ &   │ *   │ (   │ )   │ _   │ +   ┃          ┃
  // │ `   │ 1   │ 2 « │ 3 » │ 4   │ 5 € │ 6   │ 7   │ 8   │ 9   │ 0   │ -   │ =   ┃ ⌫        ┃
  // ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┯━━━━━━━┩
  // ┃        ┃ Q   │ W   │ F   │ P   │ B   │ J   │ L   │ U   │ Y   │ :   │ {   │ }   │ |     │
  // ┃ ↹      ┃     │     │   é │     │     │   ý │   ú │   í │   ó │ ;   │ [   │ ]   │ \     │
  // ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━━━┪
  // ┃         ┃ A   │ R   │ S   │ T   │ G   │ M   │ N   │ E   │ I   │ O   │*¨   ┃            ┃
  // ┃ ⇬       ┃   á │     │     │     │     │     │     │     │     │     │** ' ┃ ⏎          ┃
  // ┣━━━━━━━━━┻━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┻━━━━━━━━━━━━┫
  // ┃            ┃ Z   │ X   │ C   │ D   │ V   │ K   │ H   │ < • │ >   │ ?   ┃               ┃
  // ┃ ⇧          ┃     │     │   ç │     │     │     │   µ │ , · │ . … │ /   ┃ ⇧             ┃
  // ┣━━━━━━━┳━━━━┻━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
  // ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
  // ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ Alt   ┃ super ┃ menu  ┃ Ctrl  ┃
  // ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

  // AltGr layer
  // ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━━┓
  // │  *~ │     │     │     │     │     │     │     │     │     │     │     │     ┃          ┃
  // │  *` │     │     │     │     │     │  *^ │     │     │     │     │     │     ┃ ⌫        ┃
  // ┢━━━━━┷━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┺━━┯━━━━━━━┩
  // ┃        ┃     │     │     │     │     │     │     │     │     │     │     │     │       │
  // ┃ ↹      ┃   @ │   < │   > │   $ │   % │   ^ │   & │   * │   ' │   ` │     │     │       │
  // ┣━━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┷━━━━━━━┪
  // ┃         ┃     │     │     │     │     │     │     │     │     │     │  *¨ ┃            ┃
  // ┃ ⇬       ┃   { │   ( │   ) │   } │   = │   \ │   + │   - │   / │   " │  *´ ┃ ⏎          ┃
  // ┣━━━━━━━━━┻━━┱──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┬──┴──┲━━┻━━━━━━━━━━━━┫
  // ┃            ┃     │     │     │     │     │     │     │     │     │     ┃               ┃
  // ┃ ⇧          ┃   ~ │   [ │   ] │   _ │   # │   | │   ! │   ; │   : │   ? ┃ ⇧             ┃
  // ┣━━━━━━━┳━━━━┻━━┳━━┷━━━━┱┴─────┴─────┴─────┴─────┴─────┴─┲━━━┷━━━┳━┷━━━━━╋━━━━━━━┳━━━━━━━┫
  // ┃       ┃       ┃       ┃                                ┃       ┃       ┃       ┃       ┃
  // ┃ Ctrl  ┃ super ┃ Alt   ┃ ␣                              ┃ Alt   ┃ super ┃ menu  ┃ Ctrl  ┃
  // ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┻━━━━━━━┛

  partial alphanumeric_keys modifier_keys
  xkb_symbols "tk" {
    include "pc"
    include "inet(evdev)"

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key.
    // This is the only way to have a multi-purpose dead key with XKB.

    // The real AltGr key should be an ISO_Level5_Switch; however,
    // ISO_Level5_Switch does not work as expected when applying this layout
    // with xkbcomp, so let’s use two groups instead and make the AltGr key a
    // group selector.

    name[group1]= "custom colemak-dh layout";
    name[group2]= "AltGr";

    key.type[group1] = "FOUR_LEVEL";
    key.type[group2] = "TWO_LEVEL";

    // Digits
    key <AE01> {[ 1               , exclam          , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 1 !
    key <AE02> {[ 2               , at              , guillemotleft   , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 2 @ «
    key <AE03> {[ 3               , numbersign      , guillemotright  , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 3 # »
    key <AE04> {[ 4               , dollar          , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 4 $
    key <AE05> {[ 5               , percent         , EuroSign        , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 5 % €
    key <AE06> {[ 6               , asciicircum     , VoidSymbol      , VoidSymbol      ],[ dead_circumflex , VoidSymbol      ]}; // 6 ^     ^
    key <AE07> {[ 7               , ampersand       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 7 &
    key <AE08> {[ 8               , asterisk        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 8 *
    key <AE09> {[ 9               , parenleft       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 9 (
    key <AE10> {[ 0               , parenright      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // 0 )

    // Letters, first row
    key <AD01> {[ q               , Q               , VoidSymbol      , VoidSymbol      ],[ at              , VoidSymbol      ]}; // q Q     @
    key <AD02> {[ w               , W               , VoidSymbol      , VoidSymbol      ],[ less            , lessthanequal   ]}; // w W     < ≤
    key <AD03> {[ f               , F               , eacute          , Eacute          ],[ greater         , greaterthanequal]}; // f F é É > ≥
    key <AD04> {[ p               , P               , VoidSymbol      , VoidSymbol      ],[ dollar          , VoidSymbol      ]}; // p P     $
    key <AD05> {[ b               , B               , VoidSymbol      , VoidSymbol      ],[ percent         , VoidSymbol      ]}; // b B     %
    key <AD06> {[ j               , J               , yacute          , Yacute          ],[ asciicircum     , VoidSymbol      ]}; // j J ý Ý ^
    key <AD07> {[ l               , L               , uacute          , Uacute          ],[ ampersand       , VoidSymbol      ]}; // l L ú Ú &
    key <AD08> {[ u               , U               , iacute          , Iacute          ],[ asterisk        , VoidSymbol      ]}; // u U í Í *
    key <AD09> {[ y               , Y               , oacute          , Oacute          ],[ apostrophe      , VoidSymbol      ]}; // y Y ó Ó '
    key <AD10> {[ semicolon       , colon           , VoidSymbol      , VoidSymbol      ],[ grave           , VoidSymbol      ]}; // ; :     `

    // Letters, second row
    key <AC01> {[ a               , A               , aacute          , Aacute          ],[ braceleft       , VoidSymbol      ]}; // a A á Á {
    key <AC02> {[ r               , R               , VoidSymbol      , VoidSymbol      ],[ parenleft       , VoidSymbol      ]}; // r R     (
    key <AC03> {[ s               , S               , VoidSymbol      , VoidSymbol      ],[ parenright      , VoidSymbol      ]}; // s S     )
    key <AC04> {[ t               , T               , VoidSymbol      , VoidSymbol      ],[ braceright      , VoidSymbol      ]}; // t T     }
    key <AC05> {[ g               , G               , VoidSymbol      , VoidSymbol      ],[ equal           , VoidSymbol      ]}; // g G     =
    key <AC06> {[ m               , M               , VoidSymbol      , VoidSymbol      ],[ backslash       , VoidSymbol      ]}; // m M     \ 
    key <AC07> {[ n               , N               , VoidSymbol      , VoidSymbol      ],[ plus            , VoidSymbol      ]}; // n N     +
    key <AC08> {[ e               , E               , VoidSymbol      , VoidSymbol      ],[ minus           , VoidSymbol      ]}; // e E     -
    key <AC09> {[ i               , I               , VoidSymbol      , VoidSymbol      ],[ slash           , VoidSymbol      ]}; // i I     /
    key <AC10> {[ o               , O               , VoidSymbol      , VoidSymbol      ],[ quotedbl        , VoidSymbol      ]}; // o O     "

    // Letters, third row
    key <AB01> {[ z               , Z               , VoidSymbol      , VoidSymbol      ],[ asciitilde      , VoidSymbol      ]}; // z Z     ~
    key <AB02> {[ x               , X               , VoidSymbol      , VoidSymbol      ],[ bracketleft     , VoidSymbol      ]}; // x X     [
    key <AB03> {[ c               , C               , ccedilla        , Ccedilla        ],[ bracketright    , VoidSymbol      ]}; // c C ç Ç ]
    key <AB04> {[ d               , D               , VoidSymbol      , VoidSymbol      ],[ underscore      , VoidSymbol      ]}; // d D     _
    key <AB05> {[ v               , V               , VoidSymbol      , VoidSymbol      ],[ numbersign      , VoidSymbol      ]}; // v V     #
    key <AB06> {[ k               , K               , VoidSymbol      , VoidSymbol      ],[ bar             , brokenbar       ]}; // k K     | ¦
    key <AB07> {[ h               , H               , mu              , VoidSymbol      ],[ exclam          , VoidSymbol      ]}; // h H µ   !
    key <AB08> {[ comma           , less            , periodcentered  , U2022           ],[ semicolon       , VoidSymbol      ]}; // , < · • ;
    key <AB09> {[ period          , greater         , ellipsis        , VoidSymbol      ],[ colon           , VoidSymbol      ]}; // . > …   :
    key <AB10> {[ slash           , question        , VoidSymbol      , VoidSymbol      ],[ question        , VoidSymbol      ]}; // / ?     ?

    // Pinky keys
    key <AE11> {[ minus           , underscore      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // - _
    key <AE12> {[ equal           , plus            , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // = +
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ bracketleft     , braceleft       , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // [ {
    key <AD12> {[ bracketright    , braceright      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ] }
    key <AC11> {[ ISO_Level3_Latch, dead_diaeresis  , apostrophe      , VoidSymbol      ],[ dead_acute      , dead_diaeresis  ]}; // ' ¨ '   ´ ¨
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ grave           , asciitilde      , VoidSymbol      , VoidSymbol      ],[ dead_grave      , dead_tilde      ]}; // ` ~     ` ~
    key <BKSL> {[ backslash       , bar             , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // \ |
    key <LSGT> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //

    // Space bar
    key <SPCE> {[ space           , space           , apostrophe      , apostrophe      ],[ space           , space           ]}; //     ' '

    // AltGr
    // Note: the `ISO_Level5_Latch` here is meaningless but helps with Chromium.
    key <RALT> {
      type = "TWO_LEVEL",
      symbols = [ ISO_Level5_Latch, ISO_Level5_Latch ],
      actions = [ SetGroup(group=2), SetGroup(group=2) ]
    };
  };
};
// vim: ft=xkb:fdm=indent:ts=2:nowrap
